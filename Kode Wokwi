#define BLYNK_TEMPLATE_ID "TMPL6aC97F1B-" // Ganti dengan Template ID Blynk Anda
#define BLYNK_TEMPLATE_NAME "Hamabot" // Ganti dengan nama template Anda
#define BLYNK_AUTH_TOKEN "hmgxApg6vfyLkpyfW2GJH8hs00qrc3Pm" // Ganti dengan Auth Token Blynk Anda
#define BLYNK_PRINT Serial

#include <WiFi.h>
#include <WiFiClientSecure.h>
#include <UniversalTelegramBot.h>
#include <BlynkSimpleEsp32.h>

// Pin definitions
#define Echo 15
#define Trig 2
#define Merah 14
#define Kuning 12
#define Hijau 13
#define buzzer 26

// Telegram bot credentials
#define BOT_TOKEN "7792273936:AAEF0tAbMOLlpNJg7RAqI9rLQ9gKGHBL48E" // Ganti dengan token bot Anda
#define CHAT_ID "6351674686" // Ganti dengan chat ID Anda

WiFiClientSecure secured_client;
UniversalTelegramBot bot(BOT_TOKEN, secured_client);

// Blynk credentials
char auth[] = BLYNK_AUTH_TOKEN;
char ssid[] = "Wokwi-GUEST"; // Ganti dengan SSID WiFi Anda jika perlu
char pass[] = ""; // Ganti dengan password WiFi Anda jika perlu

// Objek
BlynkTimer timer;

float jarak = 0;
int nada = 440; // Nada default
bool hama_terdeteksi_sebelumnya = false; // Variabel untuk menandai status hama sebelumnya

// Berfungsi untuk mengukur jarak ultrasonic sensor
void ukur_jarak() {
  digitalWrite(Trig, LOW);
  delayMicroseconds(2);
  digitalWrite(Trig, HIGH);
  delayMicroseconds(10);
  digitalWrite(Trig, LOW);

  long duration = pulseIn(Echo, HIGH);
  jarak = duration * 0.034 / 2; // Lebih akurat tanpa +1

  Serial.print("Jarak: ");
  Serial.print(jarak);
  Serial.println(" cm");
}

// Berfungsi untuk mengatur LED dan Buzzer berdasarkan Jarak
void output_jarak() {
  digitalWrite(Hijau, LOW);
  digitalWrite(Kuning, LOW);
  digitalWrite(Merah, LOW);
  noTone(buzzer); // Pastikan buzzer mati sebelum kondisi baru dicek

  if (jarak >= 370) {
    Serial.println("Aman");
    digitalWrite(Hijau, HIGH);
  } else if (jarak >= 200 && jarak <= 350) {
    Serial.println("Hama Mendekat!");
    digitalWrite(Kuning, HIGH);
    tone(buzzer, nada);
  } else if (jarak < 200) {
    Serial.println("Ada Hama");
    digitalWrite(Merah, HIGH);
    tone(buzzer, nada); // Buzzer dinyalakan saat ada hama
  }
}

// Berfungsi untuk menghandle akan pesan dari Telegram Bot
void pesan() {
  int numNewMessages = bot.getUpdates(bot.last_message_received + 1);
  if (numNewMessages) {
    for (int i = 0; i < numNewMessages; i++) {
      String incomingMessage = bot.messages[i].text;
      String chat_id = String(bot.messages[i].chat_id);

      Serial.println("Pesan masuk: " + incomingMessage);

      if (incomingMessage == "on") {
        tone(buzzer, nada);
        bot.sendMessage(chat_id, "Alarm Dinyalakan");
      } else if (incomingMessage == "off") {
        noTone(buzzer);
        bot.sendMessage(chat_id, "Alarm Dimatikan");
      }
    }
    bot.last_message_received = bot.messages[numNewMessages - 1].update_id;
  }
}

void kirim_pesan_telegram_hama() {
  if (jarak < 200 && !hama_terdeteksi_sebelumnya) { // Jika ada hama dan belum terdeteksi sebelumnya
    bot.sendMessage(CHAT_ID, "Ada Hama!");
    hama_terdeteksi_sebelumnya = true; // Tandai bahwa hama sudah terdeteksi
    delay(30000); // Delay 1 menit setelah mengirim pesan
  } else if (jarak >= 200) {
    hama_terdeteksi_sebelumnya = false; // Reset status deteksi hama jika jarak aman
  }
}


// Berfungsi untuk mengirim data ke Blynk
BLYNK_WRITE(V4) {
  nada = param.asInt();
}

// Berfungsi untuk mengirim data jarak kepada Blynk
void kirim_blynk() {
  Blynk.virtualWrite(V0, jarak);

  if (jarak >= 370) {
    Blynk.virtualWrite(V1, 1);
    Blynk.virtualWrite(V2, 0);
    Blynk.virtualWrite(V3, 0);
  } else if (jarak >= 200 && jarak <= 350) {
    Blynk.virtualWrite(V1, 0);
    Blynk.virtualWrite(V2, 1);
    Blynk.virtualWrite(V3, 0);
  } else if (jarak < 200) {
    Blynk.virtualWrite(V1, 0);
    Blynk.virtualWrite(V2, 0);
    Blynk.virtualWrite(V3, 1);
  }
  Blynk.virtualWrite(V4, nada);
}

void setup() {
  Serial.begin(115200);
  delay(1000);

  WiFi.begin(ssid, pass);
  Serial.print("Connecting to Wi-Fi");
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("Connected to Wi-Fi");
  Serial.print("IP Address: ");
  Serial.println(WiFi.localIP());

  Blynk.begin(auth, ssid, pass);
  Serial.println("Connecting to Blynk...");
  while (!Blynk.connected()) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("Blynk connected!");

  secured_client.setInsecure();
  Serial.println("Telegram Bot Started");

  pinMode(Trig, OUTPUT);
  pinMode(Echo, INPUT);
  pinMode(Merah, OUTPUT);
  pinMode(Kuning, OUTPUT);
  pinMode(Hijau, OUTPUT);
  pinMode(buzzer, OUTPUT);

  timer.setInterval(2000L, kirim_blynk);
}

void loop() {
  if (!Blynk.connected()) {
    Serial.println("Blynk is disconnected!");
  }

  ukur_jarak();
  output_jarak();
  pesan();
  kirim_pesan_telegram_hama(); // Panggil fungsi ini di loop

  Blynk.run();
  timer.run();

  delay(100);
}
